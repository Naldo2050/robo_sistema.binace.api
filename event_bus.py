# event_bus.py v2.1.0 - Sistema de eventos com normaliza√ß√£o num√©rica CORRIGIDA

import time
import threading
from collections import deque
from typing import Dict, Any, Callable, Union, List, Optional
import logging
import hashlib
import re
from decimal import Decimal

# üîπ IMPORTA UTILIT√ÅRIOS DE FORMATA√á√ÉO
from format_utils import (
    format_price,
    format_quantity,
    format_percent,
    format_large_number,
    format_delta,
    format_time_seconds,
    format_scientific,
    format_epoch_ms,
    format_ratio,
    format_integer,
    auto_format
)


class EventBus:
    """
    Sistema de eventos com normaliza√ß√£o num√©rica inteligente.
    
    üîπ CORRE√á√ïES v2.1.0:
      ‚úÖ Preserva precis√£o m√°xima para campos cr√≠ticos (timestamps, volumes BTC)
      ‚úÖ N√£o converte volumes BTC para int (preserva 8 casas decimais)
      ‚úÖ Timestamps nunca s√£o normalizados (precis√£o de milissegundos)
      ‚úÖ Deduplica√ß√£o usa precis√£o correta para cada tipo de campo
      ‚úÖ Valida√ß√£o de perda de precis√£o com warnings
      ‚úÖ Op√ß√£o de desabilitar normaliza√ß√£o para eventos cr√≠ticos
      ‚úÖ Logs detalhados de altera√ß√µes causadas por normaliza√ß√£o
    """

    # üÜï Campos que N√ÉO devem ser normalizados (precis√£o cr√≠tica)
    CRITICAL_PRECISION_FIELDS = {
        'timestamp', 'epoch_ms', 'timestamp_utc', 'timestamp_ny', 'timestamp_sp',
        'first_seen_ms', 'last_seen_ms', 'recent_timestamp', 'recent_ts_ms',
        'age_ms', 'duration_ms', 'last_update_ms', 'cluster_duration_ms',
        'T', 'E',  # Campos de timestamp da Binance
    }
    
    # üÜï Campos que precisam de 8 casas decimais (volumes BTC)
    BTC_PRECISION_FIELDS = {
        'volume', 'qty', 'q', 'delta', 'delta_btc', 'cvd',
        'buy_volume_btc', 'sell_volume_btc', 'total_volume_btc',
        'whale_buy_volume', 'whale_sell_volume', 'whale_delta',
        'volume_compra', 'volume_venda', 'volume_total',
    }
    
    # üÜï Campos que s√£o pre√ßos (2-4 casas decimais dependendo do par)
    PRICE_FIELDS = {
        'price', 'p', 'preco', 'preco_abertura', 'preco_fechamento',
        'preco_maximo', 'preco_minimo', 'poc', 'vah', 'val',
        'close', 'open', 'high', 'low', 'center',
    }

    def __init__(self, max_queue_size=1000, deduplication_window=30):
        """
        max_queue_size: Tamanho m√°ximo da fila de eventos
        deduplication_window: Tempo em segundos para deduplica√ß√£o (30s padr√£o)
        """
        self._handlers = {}
        self._queue = deque(maxlen=max_queue_size)
        self._lock = threading.Lock()
        self._processing = False
        self._thread = None
        self._stop = False
        self._dedup_cache = {}
        self._dedup_window = deduplication_window
        self._logger = logging.getLogger("EventBus")
        
        # üÜï Contadores de valida√ß√£o
        self._normalization_warnings = 0
        self._precision_loss_warnings = 0
        self._total_events_normalized = 0
        
        # Iniciar thread de processamento
        self.start()

    def _parse_numeric_string(self, value: Any) -> Union[float, int, Any]:
        """
        Converte string num√©rica formatada para n√∫mero puro.
        Remove v√≠rgulas, %, K/M/B, etc.
        
        üÜï CORRE√á√ÉO: Preserva precis√£o m√°xima, nunca converte para int
        """
        if value is None or value == '':
            return None
            
        if isinstance(value, (int, float)):
            return value
            
        if not isinstance(value, str):
            return value
            
        try:
            # Remove espa√ßos
            cleaned = value.strip()
            
            # Se for string vazia ou N/A
            if not cleaned or cleaned.lower() in ['n/a', 'none', 'null', '-']:
                return None
            
            # Remove s√≠mbolo de moeda
            cleaned = cleaned.replace('$', '').replace('R$', '')
            
            # Remove sinal de + no in√≠cio (mas preserva -)
            if cleaned.startswith('+'):
                cleaned = cleaned[1:]
            
            # Detecta e processa nota√ß√£o K/M/B
            multiplier = 1
            if cleaned.upper().endswith('K'):
                multiplier = 1_000
                cleaned = cleaned[:-1]
            elif cleaned.upper().endswith('M'):
                multiplier = 1_000_000
                cleaned = cleaned[:-1]
            elif cleaned.upper().endswith('B'):
                multiplier = 1_000_000_000
                cleaned = cleaned[:-1]
            
            # Remove %
            is_percent = cleaned.endswith('%')
            if is_percent:
                cleaned = cleaned[:-1]
            
            # Remove v√≠rgulas (separador de milhar)
            cleaned = cleaned.replace(',', '')
            
            # Converte para n√∫mero usando Decimal para m√°xima precis√£o
            num = float(cleaned)
            
            # Aplica multiplicador
            num *= multiplier
            
            # üÜï CORRE√á√ÉO: NUNCA converte para int automaticamente
            # Preserva precis√£o m√°xima como float
            return num
            
        except (ValueError, TypeError):
            # Se falhar, retorna valor original
            return value

    def _get_field_precision(self, key: str) -> Optional[int]:
        """
        üÜï Determina a precis√£o necess√°ria para um campo.
        
        Returns:
            N√∫mero de casas decimais ou None para n√£o normalizar
        """
        key_lower = key.lower()
        
        # Timestamps: NUNCA normalizar (preservar milissegundos)
        if key in self.CRITICAL_PRECISION_FIELDS or 'timestamp' in key_lower or 'epoch' in key_lower:
            return None  # N√£o normalizar
        
        # Volumes BTC: 8 casas decimais
        if key in self.BTC_PRECISION_FIELDS or 'volume' in key_lower or 'qty' in key_lower or 'delta' in key_lower:
            return 8
        
        # Pre√ßos: 4 casas decimais (suficiente para BTC/USDT)
        if key in self.PRICE_FIELDS or 'price' in key_lower or 'preco' in key_lower:
            return 4
        
        # Ratios/Percentuais: 4 casas decimais
        if 'ratio' in key_lower or 'pct' in key_lower or 'percent' in key_lower or 'imbalance' in key_lower:
            return 4
        
        # Contadores: 0 casas decimais (int)
        if 'count' in key_lower or 'num_' in key_lower or key.endswith('_n'):
            return 0
        
        # Padr√£o: 8 casas decimais
        return 8

    def _normalize_value(self, key: str, value: Any, validate: bool = True) -> Union[float, int, None]:
        """
        Normaliza um valor baseado no tipo de campo.
        
        üÜï CORRE√á√ïES:
          - Preserva precis√£o cr√≠tica para timestamps
          - Usa precis√£o correta para cada tipo de campo
          - Valida perda de precis√£o e loga warnings
        
        Args:
            key: Nome do campo
            value: Valor a normalizar
            validate: Se True, valida perda de precis√£o
        """
        # Primeiro tenta converter string para n√∫mero
        parsed = self._parse_numeric_string(value)
        
        if parsed is None:
            return None
        
        # Se n√£o for num√©rico, retorna original
        if not isinstance(parsed, (int, float)):
            return parsed
        
        try:
            # Determina precis√£o necess√°ria
            precision = self._get_field_precision(key)
            
            # Se n√£o deve normalizar (timestamps, etc)
            if precision is None:
                # üÜï Garante que √© int se for timestamp (epoch em ms)
                if isinstance(parsed, float) and parsed == int(parsed):
                    return int(parsed)
                return parsed
            
            # Normaliza com precis√£o correta
            if precision == 0:
                # Contador/inteiro
                normalized = int(round(parsed))
            else:
                # Float com precis√£o espec√≠fica
                normalized = round(parsed, precision)
            
            # üÜï VALIDA√á√ÉO: Detecta perda de precis√£o significativa
            if validate and isinstance(parsed, float):
                original = parsed
                diff = abs(original - normalized)
                
                # Define toler√¢ncia baseada na precis√£o
                if precision >= 8:
                    tolerance = 1e-8
                elif precision >= 4:
                    tolerance = 1e-4
                elif precision >= 2:
                    tolerance = 1e-2
                else:
                    tolerance = 1.0
                
                if diff > tolerance:
                    self._precision_loss_warnings += 1
                    self._logger.warning(
                        f"‚ö†Ô∏è PERDA DE PRECIS√ÉO: {key}={original} ‚Üí {normalized} "
                        f"(diff={diff:.10f}, tolerance={tolerance:.10f})"
                    )
            
            return normalized
            
        except Exception as e:
            self._logger.error(f"Erro ao normalizar {key}={value}: {e}")
            return parsed

    def _normalize_event_data(self, event: Dict[str, Any], validate: bool = True) -> Dict[str, Any]:
        """
        Normaliza todos os valores num√©ricos do evento.
        
        üÜï CORRE√á√ïES:
          - Preserva precis√£o cr√≠tica
          - Valida altera√ß√µes
          - Loga warnings em casos suspeitos
        
        Args:
            event: Evento a normalizar
            validate: Se True, valida altera√ß√µes
        """
        normalized = {}
        
        # Campos que s√£o listas de pre√ßos
        price_list_fields = {'hvns', 'lvns', 'single_prints', 'levels', 'prices', 'supports', 'resistances'}
        
        for key, value in event.items():
            if value is None:
                normalized[key] = None
                continue
            
            # üÜï CORRE√á√ÉO: Timestamps NUNCA s√£o normalizados
            if key in self.CRITICAL_PRECISION_FIELDS:
                # Apenas garante que √© int se for inteiro
                if isinstance(value, float) and value == int(value):
                    normalized[key] = int(value)
                else:
                    normalized[key] = value
                continue
            
            # Normaliza listas
            if isinstance(value, list):
                if key in price_list_fields or any(x in key.lower() for x in ['price', 'level']):
                    # Lista de pre√ßos: normaliza cada item com precis√£o de pre√ßo
                    normalized_list = []
                    for item in value:
                        norm_item = self._normalize_value('price', item, validate=validate)
                        if norm_item is not None:
                            normalized_list.append(norm_item)
                    normalized[key] = normalized_list
                else:
                    # Lista gen√©rica: processa recursivamente se contiver dicts
                    normalized_list = []
                    for item in value:
                        if isinstance(item, dict):
                            normalized_list.append(self._normalize_event_data(item, validate=validate))
                        else:
                            # Tenta normalizar baseado na chave da lista
                            norm_item = self._normalize_value(key, item, validate=validate)
                            normalized_list.append(norm_item)
                    normalized[key] = normalized_list
                    
            # Normaliza dicion√°rios aninhados
            elif isinstance(value, dict):
                normalized[key] = self._normalize_event_data(value, validate=validate)
                
            # Normaliza valores individuais
            else:
                normalized[key] = self._normalize_value(key, value, validate=validate)
        
        if validate:
            self._total_events_normalized += 1
        
        return normalized

    def _generate_event_id(self, event: Dict) -> str:
        """
        Gera ID √∫nico para deduplica√ß√£o.
        
        üÜï CORRE√á√ÉO: Usa precis√£o correta para cada tipo de campo.
        """
        # Normaliza valores antes de gerar o hash
        norm_timestamp = self._normalize_value('timestamp', event.get('timestamp', ''), validate=False)
        norm_delta = self._normalize_value('delta', event.get('delta', ''), validate=False)
        norm_volume = self._normalize_value('volume_total', event.get('volume_total', ''), validate=False)
        norm_price = self._normalize_value('preco_fechamento', event.get('preco_fechamento', ''), validate=False)
        
        # üÜï CORRE√á√ÉO: Usa precis√£o correta para cada campo
        timestamp_str = str(int(norm_timestamp)) if norm_timestamp else ''  # Timestamp como int
        delta_str = f"{norm_delta:.8f}" if norm_delta is not None else ''  # Delta BTC: 8 decimais
        volume_str = f"{norm_volume:.8f}" if norm_volume is not None else ''  # Volume BTC: 8 decimais
        price_str = f"{norm_price:.4f}" if norm_price is not None else ''  # Pre√ßo: 4 decimais
        
        # Gera chave √∫nica
        key = f"{timestamp_str}|{delta_str}|{volume_str}|{price_str}"
        return hashlib.md5(key.encode()).hexdigest()

    def _is_duplicate(self, event: Dict) -> bool:
        """Verifica se evento √© duplicado usando valores normalizados"""
        event_id = self._generate_event_id(event)
        current_time = time.time()
        
        # Limpar cache antigo
        expired_keys = [k for k, t in self._dedup_cache.items() if current_time - t > self._dedup_window]
        for k in expired_keys:
            del self._dedup_cache[k]
        
        # Verificar duplicado
        if event_id in self._dedup_cache:
            return True
            
        # Registrar novo evento
        self._dedup_cache[event_id] = current_time
        return False

    def subscribe(self, event_type: str, handler: Callable):
        """Registra handler para um tipo de evento."""
        with self._lock:
            if event_type not in self._handlers:
                self._handlers[event_type] = []
            self._handlers[event_type].append(handler)
            self._logger.debug(f"Handler registrado para {event_type}")

    def publish(self, event_type: str, event_data: Dict, normalize: bool = True, validate: bool = True):
        """
        Publica um evento no barramento.
        
        üÜï CORRE√á√ïES:
          - Op√ß√£o de desabilitar normaliza√ß√£o
          - Op√ß√£o de desabilitar valida√ß√£o (para performance)
        
        Args:
            event_type: Tipo do evento
            event_data: Dados do evento
            normalize: Se True, normaliza valores num√©ricos antes de publicar
            validate: Se True, valida altera√ß√µes causadas por normaliza√ß√£o
        """
        with self._lock:
            # Normaliza dados se solicitado
            if normalize:
                try:
                    event_data = self._normalize_event_data(event_data, validate=validate)
                except Exception as e:
                    self._normalization_warnings += 1
                    self._logger.warning(f"‚ö†Ô∏è Erro ao normalizar evento {event_type}: {e}")
            
            # Ignorar eventos duplicados
            if self._is_duplicate(event_data):
                self._logger.debug(f"Evento duplicado ignorado: {event_type}")
                return
                
            # Adicionar √† fila
            self._queue.append((event_type, event_data))
            
            # Log de debug
            self._logger.debug(f"üì¢ Evento publicado: {event_type}")

    def _process_queue(self):
        """Thread de processamento de eventos."""
        while not self._stop:
            try:
                if self._queue:
                    with self._lock:
                        event_type, event_data = self._queue.popleft()
                    
                    # Processar evento
                    self._dispatch(event_type, event_data)
                else:
                    time.sleep(0.01)  # Pequena pausa para reduzir uso de CPU
            except Exception as e:
                self._logger.error(f"‚ùå Erro no processamento de eventos: {e}", exc_info=True)

    def _dispatch(self, event_type: str, event_data: Dict):
        """Envia evento para todos os handlers registrados"""
        if event_type in self._handlers:
            for handler in self._handlers[event_type]:
                try:
                    handler(event_data)
                except Exception as e:
                    self._logger.error(f"‚ùå Erro no handler para {event_type}: {e}", exc_info=True)
        else:
            self._logger.debug(f"‚ö†Ô∏è Nenhum handler para {event_type}")

    def start(self):
        """Inicia thread de processamento."""
        if not self._thread or not self._thread.is_alive():
            self._stop = False
            self._thread = threading.Thread(target=self._process_queue, daemon=True)
            self._thread.start()
            self._logger.info("‚úÖ EventBus v2.1.0 iniciado")

    def shutdown(self):
        """Para thread de processamento."""
        self._stop = True
        if self._thread and self._thread.is_alive():
            self._thread.join(timeout=1.0)
        self._logger.info("üîÑ EventBus desligado")

    def get_stats(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas do EventBus.
        
        üÜï Inclui estat√≠sticas de normaliza√ß√£o
        """
        with self._lock:
            stats = {
                "queue_size": len(self._queue),
                "handlers_count": sum(len(h) for h in self._handlers.values()),
                "event_types": list(self._handlers.keys()),
                "dedup_cache_size": len(self._dedup_cache),
                "is_running": self._thread.is_alive() if self._thread else False,
                # üÜï Estat√≠sticas de normaliza√ß√£o
                "total_events_normalized": self._total_events_normalized,
                "normalization_warnings": self._normalization_warnings,
                "precision_loss_warnings": self._precision_loss_warnings,
            }
        return stats


# ============================================================================
# TESTES E VALIDA√á√ÉO
# ============================================================================

if __name__ == "__main__":
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Teste de normaliza√ß√£o
    bus = EventBus()
    
    print("="*80)
    print("TESTE DE NORMALIZA√á√ÉO v2.1.0")
    print("="*80)
    
    # Evento com valores formatados (strings)
    test_event = {
        "timestamp": "1,759,761,480,000.00",  # epoch com v√≠rgulas
        "preco_fechamento": "123,456.789",     # pre√ßo com v√≠rgulas
        "delta": "+1,234.56789123",            # delta com sinal e mais de 8 decimais
        "volume_total": "1.5M",                # volume com nota√ß√£o M
        "imbalance_ratio": "60.46%",           # percentual
        "buy_sell_ratio": "0.41234567",        # ratio (sem %)
        "num_trades": "1343.0",                # inteiro com .0
        "duration_s": "13.67",                 # segundos
        "hvns": ["123,172.00", "124,500.50", "125,000"],  # lista de pre√ßos
        "whale_buy_volume": "45.12345678901",  # Volume BTC com muitos decimais
        "nested": {
            "poc": "$126,789.12",              # pre√ßo com $
            "volatility_5": "0.00045",         # volatilidade
            "first_seen_ms": "1759761480123.5", # timestamp n√£o deve perder precis√£o
        }
    }
    
    # Normaliza
    normalized = bus._normalize_event_data(test_event, validate=True)
    
    print("\nüìã ORIGINAL:")
    for k, v in test_event.items():
        print(f"   {k}: {v}")
    
    print("\n‚úÖ NORMALIZADO:")
    for k, v in normalized.items():
        print(f"   {k}: {v}")
    
    print("\n" + "="*80)
    print("TESTE DE DEDUPLICA√á√ÉO")
    print("="*80)
    
    # Testa deduplica√ß√£o
    event_id_1 = bus._generate_event_id(test_event)
    
    # Mesmo evento mas com formata√ß√£o diferente
    test_event_2 = {
        "timestamp": "1759761480000",         # sem v√≠rgulas
        "preco_fechamento": "123456.789",      # sem v√≠rgulas
        "delta": "1234.56789123",              # sem sinal
        "volume_total": "1500000",             # expandido
    }
    
    event_id_2 = bus._generate_event_id(test_event_2)
    
    print(f"\nüìä Hash evento 1: {event_id_1}")
    print(f"üìä Hash evento 2: {event_id_2}")
    print(f"‚úÖ S√£o iguais ap√≥s normaliza√ß√£o? {event_id_1 == event_id_2}")
    
    print("\n" + "="*80)
    print("ESTAT√çSTICAS")
    print("="*80)
    
    stats = bus.get_stats()
    print(f"\nüìà Eventos normalizados: {stats['total_events_normalized']}")
    print(f"‚ö†Ô∏è Warnings de normaliza√ß√£o: {stats['normalization_warnings']}")
    print(f"‚ö†Ô∏è Warnings de perda de precis√£o: {stats['precision_loss_warnings']}")
    
    print("\n" + "="*80)
    print("TESTE DE PRECIS√ÉO CR√çTICA")
    print("="*80)
    
    # Testa preserva√ß√£o de precis√£o em campos cr√≠ticos
    critical_test = {
        "timestamp": 1759761480123,           # Timestamp exato
        "first_seen_ms": 1759761480123,
        "last_seen_ms": 1759761480999,
        "whale_buy_volume": 123.45678901,     # 8+ decimais
        "whale_sell_volume": 78.12345678,
        "delta": 45.33333223,                 # Delta com muitos decimais
    }
    
    normalized_critical = bus._normalize_event_data(critical_test, validate=True)
    
    print("\nüî¨ TESTE DE PRECIS√ÉO:")
    for k in critical_test:
        original = critical_test[k]
        norm = normalized_critical[k]
        if isinstance(original, (int, float)) and isinstance(norm, (int, float)):
            diff = abs(original - norm)
            status = "‚úÖ" if diff < 1e-8 else "‚ùå"
            print(f"   {status} {k}: {original} ‚Üí {norm} (diff: {diff:.15f})")
    
    print("\n‚úÖ Testes conclu√≠dos!")
    
    bus.shutdown()