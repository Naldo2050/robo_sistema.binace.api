# fix_playwright.py
import os
import shutil
import logging
import subprocess
import sys

logging.basicConfig(level=logging.INFO)

def install_playwright():
    """Instala/atualiza o Playwright e browsers."""
    try:
        logging.info("üì¶ Atualizando Playwright...")
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "playwright"], check=True)
        
        logging.info("üåê Instalando browsers...")
        subprocess.run([sys.executable, "-m", "playwright", "install", "chromium"], check=True)
        
        logging.info("‚úÖ Playwright atualizado com sucesso!")
        return True
    except Exception as e:
        logging.error(f"‚ùå Erro ao atualizar Playwright: {e}")
        return False

def fix_playwright_extensions():
    """Remove arquivos problem√°ticos do diret√≥rio do Playwright."""
    
    playwright_dirs = [
        "./playwright_user_data",
        "./gemini_data"
    ]
    
    for dir_path in playwright_dirs:
        if os.path.exists(dir_path):
            logging.info(f"üîç Verificando diret√≥rio: {dir_path}")
            
            # Arquivos/pastas problem√°ticos mais abrangente
            problematic_paths = [
                "Default/Extensions",
                "Default/Local Extension Settings",
                "Default/Network Persistent State",
                "Default/TransportSecurity",
                "Default/Web Data",
                "Default/Web Data-journal",
                "CrashpadMetrics-active.pma",
                "chrome_debug.log",
                "Default/Preferences",
                "Default/Secure Preferences",
                "Default/Login Data",
                "Default/Login Data-journal"
            ]
            
            for prob_path in problematic_paths:
                full_path = os.path.join(dir_path, prob_path)
                try:
                    if os.path.exists(full_path):
                        if os.path.isfile(full_path):
                            os.remove(full_path)
                            logging.info(f"‚úÖ Arquivo removido: {prob_path}")
                        elif os.path.isdir(full_path):
                            shutil.rmtree(full_path)
                            logging.info(f"‚úÖ Diret√≥rio removido: {prob_path}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel remover {prob_path}: {e}")
        else:
            # Cria o diret√≥rio limpo
            os.makedirs(dir_path, exist_ok=True)
            logging.info(f"üìÅ Diret√≥rio criado: {dir_path}")

def clean_all_playwright_data():
    """Remove completamente todos os dados do Playwright."""
    print("‚ö†Ô∏è  ATEN√á√ÉO: Isso vai remover TODOS os dados salvos do browser!")
    print("   Voc√™ precisar√° fazer login novamente no Google Gemini.")
    
    choice = input("Deseja continuar? (s/N): ").lower().strip()
    
    if choice == 's':
        dirs_to_clean = ["./playwright_user_data", "./gemini_data"]
        
        for dir_path in dirs_to_clean:
            if os.path.exists(dir_path):
                try:
                    shutil.rmtree(dir_path)
                    logging.info(f"üßπ Diret√≥rio removido: {dir_path}")
                except Exception as e:
                    logging.error(f"‚ùå Erro ao remover {dir_path}: {e}")
        
        logging.info("‚úÖ Limpeza completa realizada!")
    else:
        logging.info("‚ùå Limpeza cancelada.")

def setup_first_time():
    """Configura√ß√£o para primeira execu√ß√£o."""
    print("üöÄ Configura√ß√£o inicial do sistema...")
    
    # Atualiza Playwright
    if not install_playwright():
        print("‚ùå Falha na instala√ß√£o do Playwright")
        return False
    
    # Remove arquivos problem√°ticos
    fix_playwright_extensions()
    
    print("\n‚úÖ Configura√ß√£o inicial conclu√≠da!")
    print("üí° IMPORTANTE: Na primeira execu√ß√£o do bot, uma janela do browser ser√° aberta.")
    print("   Fa√ßa login no Google/Gemini e depois voc√™ pode fechar a janela.")
    print("   Nas pr√≥ximas execu√ß√µes, o login ser√° lembrado.")
    
    return True

if __name__ == "__main__":
    print("=== CORRETOR DO PLAYWRIGHT ===")
    print("1. Configura√ß√£o inicial (recomendado para primeira vez)")
    print("2. Corrigir problemas de extens√£o")
    print("3. Limpeza completa (remove login salvo)")
    print("4. Apenas atualizar Playwright")
    print("5. Sair")
    
    choice = input("Escolha uma op√ß√£o (1/2/3/4/5): ").strip()
    
    if choice == "1":
        setup_first_time()
        
    elif choice == "2":
        fix_playwright_extensions()
        print("\n‚úÖ Corre√ß√£o aplicada! Tente executar o bot novamente.")
        
    elif choice == "3":
        clean_all_playwright_data()
        
    elif choice == "4":
        install_playwright()
        
    else:
        print("üëã Saindo...")