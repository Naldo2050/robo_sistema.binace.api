#!/usr/bin/env python3
"""
Teste de Conex√£o com OrderBook da Binance

Este script testa:
1. Conex√£o com a API de orderbook da Binance
2. Extra√ß√£o de dados brutos
3. Valida√ß√£o dos dados extra√≠dos
4. Processamento atrav√©s do OrderBookAnalyzer
"""

import json
import logging
import time
from typing import Dict, Any, Optional

import requests

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
SYMBOL = "BTCUSDT"
API_ENDPOINTS = {
    "futures": "https://fapi.binance.com/fapi/v1/depth",
    "spot": "https://api.binance.com/api/v3/depth",
}
TIMEOUT_SECONDS = 10


def test_raw_api_connection():
    """Testa conex√£o direta com a API da Binance."""
    logger.info("=" * 60)
    logger.info("TESTE 1: Conex√£o Direta com a API da Binance")
    logger.info("=" * 60)
    
    for market_type, endpoint in API_ENDPOINTS.items():
        logger.info(f"\nTestando conex√£o com {market_type.upper()}: {endpoint}")
        
        try:
            # Par√¢metros da requisi√ß√£o
            params = {
                "symbol": SYMBOL,
                "limit": 20  # Obt√©m 20 n√≠veis de profundidade
            }
            
            # Faz a requisi√ß√£o
            start_time = time.time()
            response = requests.get(endpoint, params=params, timeout=TIMEOUT_SECONDS)
            elapsed_ms = (time.time() - start_time) * 1000
            
            # Verifica o status
            logger.info(f"Status Code: {response.status_code}")
            logger.info(f"Tempo de resposta: {elapsed_ms:.2f}ms")
            
            if response.status_code == 200:
                # Processa a resposta
                data = response.json()
                
                # Verifica estrutura b√°sica
                if "bids" in data and "asks" in data:
                    bids_count = len(data["bids"])
                    asks_count = len(data["asks"])
                    
                    logger.info(f"Estrutura v√°lida: bids={bids_count}, asks={asks_count}")
                    
                    # Extrai alguns dados para verifica√ß√£o
                    if bids_count > 0 and asks_count > 0:
                        best_bid = data["bids"][0]
                        best_ask = data["asks"][0]
                        
                        bid_price = float(best_bid[0])
                        bid_qty = float(best_bid[1])
                        ask_price = float(best_ask[0])
                        ask_qty = float(best_ask[1])
                        
                        logger.info(f"Melhor BID: ${bid_price:.2f} (qty: {bid_qty:.6f})")
                        logger.info(f"Melhor ASK: ${ask_price:.2f} (qty: {ask_qty:.6f})")
                        
                        # Calcula spread
                        spread = ask_price - bid_price
                        spread_pct = (spread / bid_price) * 100
                        logger.info(f"Spread: ${spread:.2f} ({spread_pct:.4f}%)")
                        
                        # Calcula profundidade
                        bid_depth = sum(float(bid[0]) * float(bid[1]) for bid in data["bids"][:5])
                        ask_depth = sum(float(ask[0]) * float(ask[1]) for ask in data["asks"][:5])
                        logger.info(f"Profundidade (top 5): BID=${bid_depth:,.0f}, ASK=${ask_depth:,.0f}")
                        
                        # Salva dados brutos para an√°lise posterior
                        with open(f"orderbook_raw_{market_type}.json", "w") as f:
                            json.dump(data, f, indent=2)
                        logger.info(f"Dados brutos salvos em orderbook_raw_{market_type}.json")
                        
                        logger.info(f"‚úÖ Conex√£o com {market_type.upper()} bem-sucedida!")
                    else:
                        logger.error(f"‚ùå Dados de orderbook vazios para {market_type.upper()}")
                else:
                    logger.error(f"‚ùå Estrutura inv√°lida na resposta de {market_type.upper()}")
                    logger.debug(f"Resposta: {data}")
            else:
                logger.error(f"‚ùå Falha na requisi√ß√£o: {response.status_code}")
                logger.error(f"Resposta: {response.text}")
        
        except requests.exceptions.Timeout:
            logger.error(f"‚ùå Timeout na conex√£o com {market_type.upper()}")
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erro na requisi√ß√£o com {market_type.upper()}: {e}")
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado com {market_type.upper()}: {e}")


def test_orderbook_analyzer():
    """Testa o processamento atrav√©s do OrderBookAnalyzer."""
    logger.info("\n" + "=" * 60)
    logger.info("TESTE 2: Processamento com OrderBookAnalyzer")
    logger.info("=" * 60)
    
    try:
        # Importa o OrderBookAnalyzer
        from orderbook_analyzer import OrderBookAnalyzer
        from time_manager import TimeManager
        
        # Inicializa o TimeManager
        tm = TimeManager()
        
        # Inicializa o OrderBookAnalyzer
        analyzer = OrderBookAnalyzer(
            symbol=SYMBOL,
            market_type="futures",
            time_manager=tm,
            cache_ttl_seconds=5.0,
            max_stale_seconds=30.0
        )
        
        logger.info("OrderBookAnalyzer inicializado com sucesso")
        
        # Faz a an√°lise
        logger.info("Executando an√°lise...")
        event = analyzer.analyze()
        
        # Verifica o resultado
        if event:
            logger.info("‚úÖ An√°lise conclu√≠da com sucesso!")
            
            # Extrai informa√ß√µes principais
            is_valid = event.get("is_valid", False)
            is_data_valid = event.get("is_data_valid", False)
            bid_depth = event.get("orderbook_data", {}).get("bid_depth_usd", 0)
            ask_depth = event.get("orderbook_data", {}).get("ask_depth_usd", 0)
            imbalance = event.get("orderbook_data", {}).get("imbalance", 0)
            
            logger.info(f"Evento v√°lido: {is_valid}")
            logger.info(f"Dados v√°lidos: {is_data_valid}")
            logger.info(f"Profundidade BID: ${bid_depth:,.2f}")
            logger.info(f"Profundidade ASK: ${ask_depth:,.2f}")
            logger.info(f"Imbalance: {imbalance:.4f}")
            
            # Salva o evento completo para an√°lise
            with open("orderbook_analyzed.json", "w") as f:
                json.dump(event, f, indent=2, default=str)
            logger.info("Evento analisado salvo em orderbook_analyzed.json")
            
            # Obt√©m estat√≠sticas
            stats = analyzer.get_stats()
            logger.info(f"Estat√≠sticas: {json.dumps(stats, indent=2)}")
            
            return True
        else:
            logger.error("‚ùå Falha na an√°lise - evento retornado √© None")
            return False
    
    except ImportError as e:
        logger.error(f"‚ùå Erro ao importar OrderBookAnalyzer: {e}")
        logger.error("Verifique se o arquivo orderbook_analyzer.py est√° no mesmo diret√≥rio")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar com OrderBookAnalyzer: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


def test_data_extraction():
    """Testa extra√ß√£o de dados do evento para o AIAnalyzer."""
    logger.info("\n" + "=" * 60)
    logger.info("TESTE 3: Extra√ß√£o de Dados para AIAnalyzer")
    logger.info("=" * 60)
    
    try:
        # Carrega o evento analisado
        with open("orderbook_analyzed.json", "r") as f:
            event = json.load(f)
        
        # Importa o AIAnalyzer
        from ai_analyzer_qwen import AIAnalyzer
        
        # Inicializa o AIAnalyzer
        ai = AIAnalyzer()
        
        logger.info("AIAnalyzer inicializado com sucesso")
        
        # Testa extra√ß√£o de orderbook
        ob_data = ai._extract_orderbook_data(event)
        
        if ob_data:
            logger.info("‚úÖ Extra√ß√£o de orderbook bem-sucedida!")
            logger.info(f"Dados extra√≠dos: {json.dumps(ob_data, indent=2)}")
            
            # Testa cria√ß√£o de prompt
            prompt = ai._create_prompt(event)
            
            if prompt:
                logger.info("‚úÖ Cria√ß√£o de prompt bem-sucedida!")
                logger.info(f"Prompt (primeiros 500 chars): {prompt[:500]}...")
                
                # üîß CORRE√á√ÉO: Salva o prompt com codifica√ß√£o UTF-8
                try:
                    with open("orderbook_prompt.txt", "w", encoding="utf-8") as f:
                        f.write(prompt)
                    logger.info("Prompt salvo em orderbook_prompt.txt")
                except UnicodeEncodeError:
                    # Se ainda falhar, remove os emojis e salva novamente
                    logger.warning("‚ö†Ô∏è Problema de codifica√ß√£o detectado, removendo emojis...")
                    prompt_clean = prompt.encode('ascii', 'ignore').decode('ascii')
                    with open("orderbook_prompt.txt", "w") as f:
                        f.write(prompt_clean)
                    logger.info("Prompt (sem emojis) salvo em orderbook_prompt.txt")
                
                return True
            else:
                logger.error("‚ùå Falha na cria√ß√£o do prompt")
                return False
        else:
            logger.error("‚ùå Falha na extra√ß√£o de orderbook")
            return False
    
    except FileNotFoundError:
        logger.error("‚ùå Arquivo orderbook_analyzed.json n√£o encontrado")
        logger.error("Execute o TESTE 2 primeiro para gerar este arquivo")
        return False
    except ImportError as e:
        logger.error(f"‚ùå Erro ao importar AIAnalyzer: {e}")
        logger.error("Verifique se o arquivo ai_analyzer_qwen.py est√° no mesmo diret√≥rio")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro na extra√ß√£o de dados: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


def main():
    """Fun√ß√£o principal que executa todos os testes."""
    logger.info("Iniciando testes de conex√£o com OrderBook da Binance")
    logger.info(f"S√≠mbolo: {SYMBOL}")
    
    # TESTE 1: Conex√£o direta com a API
    test_raw_api_connection()
    
    # Aguarda um pouco entre os testes
    time.sleep(2)
    
    # TESTE 2: Processamento com OrderBookAnalyzer
    if test_orderbook_analyzer():
        # Aguarda um pouco entre os testes
        time.sleep(2)
        
        # TESTE 3: Extra√ß√£o de dados para AIAnalyzer
        test_data_extraction()
    
    logger.info("\n" + "=" * 60)
    logger.info("Testes conclu√≠dos!")
    logger.info("=" * 60)


if __name__ == "__main__":
    main()